def unnamed():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.174,0.0,0.0,0.0])
  set_payload(0.92, [0.0, 0.0, 0.058])
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  step_count_8028e7ff_a71c_4541_801c_a87b4574d081 = 0.0
  thread Step_Counter_Thread_455f9805_528b_4875_b7c5_6496553f61d3():
    while (True):
      step_count_8028e7ff_a71c_4541_801c_a87b4574d081 = step_count_8028e7ff_a71c_4541_801c_a87b4574d081 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_455f9805_528b_4875_b7c5_6496553f61d3()
  global v6=5
  global v5=6
  global v4=5
  global v3=6
  global v2=6
  global v1=5
  global i_var_1__TIMER=0
  global c10=2
  global c9=1
  global c8=1
  global c7=1
  global c6=2
  global c5=1
  global c4=3
  global c3=3
  global c2=3
  global c1=3
  global v10=5
  global v9=7
  global v8=7
  global v7=5
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.3.1, Robotiq Inc.
  #   Type: Gripper
  
  ###########################################
  #######Gripper URCap preamble start########
  #######Version null########
  
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  LBP = 12
  LRD = 13
  LBL = 14
  LGN = 15
  
  def rq_init_connection(gripper_sid=9, gripper_socket="1"):
  	socket_open("127.0.0.1",63352, gripper_socket)
  	socket_set_var("SID", gripper_sid,  gripper_socket)
  	ack = socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
          socket_set_var("SID", gripper_sid,  gripper_socket)
          sync()
          return is_ack(socket_read_byte_list(3, gripper_socket))
  end
  
  def rq_activate(gripper_socket="1"):
  	rq_gripper_act = 0
  
      if (not rq_is_gripper_activated(gripper_socket)):
         rq_reset(gripper_socket)
  
         while(socket_get_var("ACT",gripper_socket) == 1):
            sleep(0.1)
            rq_reset(gripper_socket)
         end
      end
  
  	rq_set_var(ACT,1, gripper_socket)
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
  	rq_activate(gripper_socket)
  
  	while(not rq_is_gripper_activated(gripper_socket)):
  		# wait for activation completed
  	end
  end
  
  def rq_stop(gripper_socket="1"):
  	rq_set_var(GTO,0, gripper_socket)
  end
  
  def rq_reset(gripper_socket="1"):
  	rq_gripper_act = 0
  	rq_obj_detect = 0
  	rq_mov_complete = 0
  
  	rq_set_var(ACT,0, gripper_socket)
  	rq_set_var(ATR,0, gripper_socket)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
  	rq_set_var(ARD,0, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
  	rq_set_var(ARD,1, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_set_force(force, gripper_socket="1"):
  	rq_set_var(FOR,force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
  	rq_set_var(SPE,speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
  	rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
  	rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
  	rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
  	rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
  	rq_mov_complete = 0
  	rq_obj_detect = 0
  
  	rq_set_pos(pos, gripper_socket)
  	rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
  	rq_move(pos, gripper_socket)
  
  	while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_go_to(gripper_socket="1"):
  	rq_set_var(GTO,1, gripper_socket)
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
  	rq_set_var(POS, pos, gripper_socket)
  
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
  end
  
  # set the position, speed and force
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
     rq_send_pos_spd_for(pos, speed, force, gripper_socket)
  
     ack = socket_read_byte_list(3, gripper_socket)
  
     while(is_not_ack(ack)):
        rq_send_pos_spd_for(pos, speed, force, gripper_socket)
     	  ack = socket_read_byte_list(3, gripper_socket)
     end
  end
  
  # send the position, speed and force
  def rq_send_pos_spd_for(pos, speed, force, gripper_socket="1"):
  
     socket_send_string("SET POS", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(pos, gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string("SPE", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(speed, gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string("FOR", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(force, gripper_socket)
     socket_send_byte(10, gripper_socket)
  
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
  	rq_mov_complete = 0
  
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  	sleep(0.01)
  
  	if (is_OBJ_gripper_at_position(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	if (is_OBJ_object_detected(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	return False
  
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
  	gSTA = rq_get_var(STA, 1, gripper_socket)
  
  	if(is_STA_gripper_activated(gSTA)):
  		rq_gripper_act = 1
  		return True
  	else:
  		rq_gripper_act = 0
  		return False
  	end
  end
  
  def rq_is_object_detected(gripper_socket="1"):
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
  	if(is_OBJ_object_detected(gOBJ)):
  		rq_obj_detect = 1
  		return True
  	else:
  		rq_obj_detect = 0
  		return False
  	end
  end
  
  def rq_current_pos(gripper_socket="1"):
  	rq_pos = socket_get_var("POS",gripper_socket)
  	sync()
      return rq_pos
  end
  
  def rq_motor_current(gripper_socket="1"):
  	rq_current = socket_get_var("COU",gripper_socket)
  	sync()
      return rq_current * 10
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	if(is_FLT_no_fault(gFLT)):
  		textmsg("Gripper Fault : ", "No Fault (0x00)")
  	elif (is_FLT_action_delayed(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
  	elif (is_FLT_not_activated(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
  	elif (is_FLT_autorelease_in_progress(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
  	elif (is_FLT_overcurrent(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection tiggered (0x0E)")
  	elif (is_FLT_autorelease_completed(gFLT)):
  		textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
  	else:
  		textmsg("Gripper Fault : ", "Unkwown Fault")
  	end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
  	socket_send_string("GET NCY",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
  	else:
  		textmsg("Gripper Cycle Number : ", string_from_server)
  	end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
  	socket_send_string("GET DST",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
  	elif(string_from_server == "1"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
  	elif(string_from_server == "2"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
  	elif(string_from_server == "3"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
  	else:
  		textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
  	end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
  	socket_send_string("GET SNU",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
  	socket_send_string("GET FWV",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
  	socket_send_string("GET VER",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_gripper_probleme_connection(gripper_socket="1"):
  	socket_send_string("GET PCO",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	if (string_from_server == "0"):
  		textmsg("Gripper Connection State : ", "No connection problem detected")
  	else:
  		textmsg("Gripper Connection State : ", "Connection problem detected")
  	end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
  	# list length is not 3
  	if (list_of_bytes[0] != 3):
  		return False
  	end
  
  	# first byte not is 'a'?
  	if (list_of_bytes[1] != 97):
  		return False
  	end
  
  	# first byte not is 'c'?
  	if (list_of_bytes[2] != 99):
  		return False
  	end
  
  	# first byte not is 'k'?
  	if (list_of_bytes[3] != 107):
  		return False
  	end
  
  	return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
  	if (is_ack(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '2'?
  	if (list_of_bytes[1] == 50):
  		return True
  	end
  
  	# byte is '1'?
  	if (list_of_bytes[1]  == 49):
  		return True
  	end
  
  	return False
  
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  
  	if (is_OBJ_gripper_at_position(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_FLT_no_fault(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '0'?
  	if (list_of_bytes[2] != 48):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '7'?
  	if (list_of_bytes[2] != 55):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '1'?
  	if (list_of_bytes[2] != 49):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '4'?
  	if (list_of_bytes[2] != 52):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
  
  	sync()
  	if (var_name == ACT):
  		socket_set_var("ACT", var_value, gripper_socket)
  	elif (var_name == GTO):
  		socket_set_var("GTO", var_value, gripper_socket)
  	elif (var_name == ATR):
  		socket_set_var("ATR", var_value, gripper_socket)
  	elif (var_name == ARD):
  		socket_set_var("ARD", var_value, gripper_socket)
  	elif (var_name == FOR):
  		socket_set_var("FOR", var_value, gripper_socket)
  	elif (var_name == SPE):
  		socket_set_var("SPE", var_value, gripper_socket)
  	elif (var_name == POS):
  		socket_set_var("POS", var_value, gripper_socket)
  	elif (var_name == LBP):
  		socket_set_var("LBP", var_value, gripper_socket)
  	elif (var_name == LRD):
  		socket_set_var("LRD", var_value, gripper_socket)
  	elif (var_name == LBL):
  		socket_set_var("LBL", var_value, gripper_socket)
  	elif (var_name == LGN):
  		socket_set_var("LGN", var_value, gripper_socket)
  	else:
  	end
  
      sync()
  
  	ack = socket_read_byte_list(3, gripper_socket)
  
  	sync()
  
  	while(is_not_ack(ack)):
  		textmsg("Retry in rq_set_var")
  
  		textmsg("rq_set_var : retry", " ...")
  		textmsg("rq_set_var : var_name = ", var_name)
  		textmsg("rq_set_var : var_value = ", var_value)
  
  		if (ack[0] != 0):
  			textmsg("rq_set_var : invalid ack value = ", ack)
  		end
  
  		socket_set_var(var_name , var_value,gripper_socket)
  		sync()
  		ack = socket_read_byte_list(3, gripper_socket)
  		sync()
  	end
  end
  
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
  
  	if (var_name == FLT):
  		socket_send_string("GET FLT",gripper_socket)
  		sync()
  	elif (var_name == OBJ):
  		socket_send_string("GET OBJ",gripper_socket)
  		sync()
  	elif (var_name == STA):
  		socket_send_string("GET STA",gripper_socket)
  		sync()
  	elif (var_name == PRE):
  		socket_send_string("GET PRE",gripper_socket)
  		sync()
  	else:
  	end
  
  	var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  	sync()
  
  	return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
  	if(gripper_selected):
  		if(rq_is_object_detected(gripper_socket)):
  		    return True
  		else:
  		    return False
  		end
  	else:
  		return True
  	end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var(LBP,0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
      	value_mm_limited = open_mm
      elif (value_mm < closed_mm):
      	value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
  	if(value_mod < 0.5):
  		return floor(value)
  	else:
  		return ceil(value)
  	end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  #########################################
  
  
  rq_obj_detect = 0
  rq_init_connection(9, "1")
  connectivity_checked = [-1,-1,-1,-1]
  status_checked = [-1,-1,-1,-1]
  current_speed = [-1,-1,-1,-1]
  current_force = [-1,-1,-1,-1]
  set_closed_norm(100.0,1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0,2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0,3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0,4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  
  #######Gripper URCap preamble end##########
  ###########################################
  
  # end: URCap Installation Node
  global cont_1=0
  global cont_2=0
  while (True):
    $ 1 "Programa de robot"
    $ 2 "MoverJ"
    $ 3 "Punto_de_paso_2" "breakAfter"
    movej(get_inverse_kin(p[-.566321385856, -.016438373357, .304179509155, 2.227259086322, 2.209050272090, .005721590505], qnear=[-0.1647284666644495, -1.3952611128436487, 1.2586908340454102, -1.4283478895770472, -1.571054760609762, -0.1565187613116663]), a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "If digital_in[1]≟ True "
    if (get_standard_digital_in(1) ==   True  ):
      $ 5 "MoverJ"
      $ 6 "Punto_de_paso_3" "breakAfter"
      movej(get_inverse_kin(p[-.730444276588, -.098928121418, .215760595227, 2.227379308724, 2.208981166362, .005503118805], qnear=[-0.014253918324605763, -0.9557769934283655, 0.8630619049072266, -1.4723542372332972, -1.5700963179217737, -0.0059617201434534195]), a=1.3962634015954636, v=1.0471975511965976)
      $ 7 "MoverL"
      $ 8 "Punto_de_paso_4" "breakAfter"
      movel(p[-.730392792696, -.100609374223, .060935265474, 2.227155075957, 2.208988804873, .005583446124], a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.3.1, Robotiq Inc.
      #   Type: Gripper
      $ 9 "Gripper Close (1)"
      gripper_1_used = True
      if (connectivity_checked[0] != 1):
        if not(rq_set_sid(9, "1")):
          popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
        end
        connectivity_checked[0] = 1
      end
      if (status_checked[0] != 1):
        if not(rq_is_gripper_activated("1")):
          popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
        end
        status_checked[0] = 1
      end
      rq_set_speed(255, "1")
      current_speed[0] = 255
      rq_set_force(255, "1")
      current_force[0] = 255
      rq_set_pos(255, "1")
      rq_go_to("1")
      rq_wait("1")
      gripper_1_selected = True
      gripper_2_selected = False
      gripper_3_selected = False
      gripper_4_selected = False
      gripper_1_used = False
      gripper_2_used = False
      gripper_3_used = False
      gripper_4_used = False
      # end: URCap Program Node
      $ 10 "Punto_de_paso_5" "breakAfter"
      movel(p[-.730487125181, -.098949022354, .244682285928, 2.227328035133, 2.209061551710, .005287997702], a=1.2, v=0.25)
      $ 11 "MoverJ"
      $ 12 "Punto_de_paso_6" "breakAfter"
      movej(get_inverse_kin(p[.513311966518, -.352994323032, .244724992682, 2.203856034397, -2.238576412231, -.008909060072], qnear=[2.3631184101104736, -1.2649644056903284, 1.2468109130859375, -1.5469682852374476, -1.5709226767169397, -0.7628429571734827]), a=1.3962634015954636, v=1.0471975511965976)
      $ 13 "MoverL"
      $ 14 "Punto_de_paso_7" "breakAfter"
      movel(p[.513278072151, -.353003862404, .236796647876, 2.203763915926, -2.238697027167, -.009120114404], a=1.2, v=0.25)
      $ 15 "Palé"
      if (cont_1 == 0):
        pose_1 = p[.513224567461, -.352941114536, .016962474694, 2.203863236659, -2.238393941161, -.009314066403]
      elif (cont_1 == 1):
        pose_1 = p[.554810596106, -.353017881791, .018104225127, 2.203856055989, -2.238500866910, -.008956480056]
      elif (cont_1 == 2):
        pose_1 = p[.593475363203, -.353016196215, .017998009023, 2.203652981289, -2.238809083304, -.009222219609]
      elif (cont_1 == 3):
        pose_1 = p[.632184147389, -.353060410612, .018035419147, 2.203020577845, -2.239389601799, -.009141742888]
      elif (cont_1 == 4):
        pose_1 = p[.674090851458, -.352959366050, .017973942493, 2.203697746639, -2.238717787266, -.009350995022]
      elif (cont_1 == 5):
        pose_1 = p[.513168594416, -.352955506366, .055002792958, 2.203869758597, -2.238237608481, -.009270873146]
      elif (cont_1 == 6):
        pose_1 = p[.554816404723, -.353085681479, .055084610531, 2.203839574972, -2.238456516333, -.008547041026]
      elif (cont_1 == 7):
        pose_1 = p[.593467773570, -.353019120540, .055991047334, 2.203624049873, -2.238752074764, -.009229965338]
      elif (cont_1 == 8):
        pose_1 = p[.632184425254, -.353016376128, .056385574635, 2.203100752357, -2.239363987415, -.009119588993]
      elif (cont_1 == 9):
        pose_1 = p[.674103654156, -.352887469821, .056285625802, 2.203735222676, -2.238568724908, -.009519706763]
      elif (cont_1 == 10):
        pose_1 = p[.513186040995, -.353009700341, .092904912663, 2.203758462356, -2.238367542967, -.009057018849]
      elif (cont_1 == 11):
        pose_1 = p[.554815199671, -.353107342291, .093053539003, 2.203764329293, -2.238486621800, -.008435196606]
      elif (cont_1 == 12):
        pose_1 = p[.593499660509, -.353048647000, .093032875390, 2.203577540392, -2.238732576216, -.008839450693]
      elif (cont_1 == 13):
        pose_1 = p[.632162417599, -.352979197116, .094068461610, 2.203161120212, -2.239183063327, -.009278826783]
      elif (cont_1 == 14):
        pose_1 = p[.674108251555, -.352865111800, .094250033665, 2.203833013352, -2.238424685534, -.009280286168]
      elif (cont_1 == 15):
        pose_1 = p[.513170708084, -.353048936893, .131067299806, 2.203734554535, -2.238343056471, -.008952794506]
      elif (cont_1 == 16):
        pose_1 = p[.554819388099, -.353127734268, .131007705258, 2.203642492159, -2.238551534923, -.008207770868]
      elif (cont_1 == 17):
        pose_1 = p[.593451005700, -.353139496484, .131045099057, 2.203393251591, -2.238893331355, -.008886805674]
      elif (cont_1 == 18):
        pose_1 = p[.632194155715, -.352975902299, .131536220617, 2.203267878095, -2.239022657475, -.009181205365]
      elif (cont_1 == 19):
        pose_1 = p[.674134120913, -.352862068026, .131707206685, 2.203865000162, -2.238296039311, -.009245053415]
      end
      if (cont_1 >= 19):
        cont_1 = 0
      else:
        cont_1 = cont_1 + 1
      end
      $ 38 "Acercar_1" "noBreak"
      movel(pose_trans(pose_1, pose_trans(pose_inv(p[.513190934279, -.352899190577, .016938657849, 2.203946130260, -2.238343765062, -.009483952178]),p[.535486537472, -.352927707182, .092693235754, 2.203905556989, -2.238368044699, -.009239097656])), a=1.2, v=0.25)
      $ 39 "PuntoDePatrón_1" "noBreak"
      movel(pose_1, a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.3.1, Robotiq Inc.
      #   Type: Gripper
      $ 40 "Gripper Open (1)" "noBreak"
      gripper_1_used = True
      if (connectivity_checked[0] != 1):
        if not(rq_set_sid(9, "1")):
          popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
        end
        connectivity_checked[0] = 1
      end
      if (status_checked[0] != 1):
        if not(rq_is_gripper_activated("1")):
          popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
        end
        status_checked[0] = 1
      end
      rq_set_speed(255, "1")
      current_speed[0] = 255
      rq_set_force(255, "1")
      current_force[0] = 255
      rq_set_pos(0, "1")
      rq_go_to("1")
      rq_wait("1")
      gripper_1_selected = True
      gripper_2_selected = False
      gripper_3_selected = False
      gripper_4_selected = False
      gripper_1_used = False
      gripper_2_used = False
      gripper_3_used = False
      gripper_4_used = False
      # end: URCap Program Node
      $ 41 "Ajustar" "noBreak"
      $ 42 "Esperar: 1.0" "noBreak"
      sleep(1.0)
      $ 43 "Salir_1" "noBreak"
      movel(pose_trans(pose_1, pose_trans(pose_inv(p[.513190934279, -.352899190577, .016938657849, 2.203946130260, -2.238343765062, -.009483952178]),p[.504232876952, -.350492390664, .177021593801, 2.203648826398, -2.238522544510, -.008663256964])), a=1.2, v=0.25)
    else:
      $ 44 "ElseIf digital_in[0]≟ True "
      if (get_standard_digital_in(0) ==   True  ):
        $ 45 "MoverJ"
        $ 46 "Punto_de_pas_28" "breakAfter"
        movej(get_inverse_kin(p[-.730324843465, .054404399585, .172260502113, 2.227146894657, 2.208915754951, .005807760830], qnear=[-0.22375709215273076, -0.9735539595233362, 1.0027756690979004, -1.5939887205706995, -1.5713542143451136, -0.21553594270815069]), a=1.3962634015954636, v=1.0471975511965976)
        $ 47 "MoverL"
        $ 48 "Punto_de_pas_29" "breakAfter"
        movel(p[-.730375425448, .054354439606, .064707450642, 2.227216373073, 2.209250404393, .005658998116], a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.3.1, Robotiq Inc.
        #   Type: Gripper
        $ 49 "Gripper Close (1)"
        gripper_1_used = True
        if (connectivity_checked[0] != 1):
          if not(rq_set_sid(9, "1")):
            popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
          end
          connectivity_checked[0] = 1
        end
        if (status_checked[0] != 1):
          if not(rq_is_gripper_activated("1")):
            popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
          end
          status_checked[0] = 1
        end
        rq_set_speed(255, "1")
        current_speed[0] = 255
        rq_set_force(255, "1")
        current_force[0] = 255
        rq_set_pos(255, "1")
        rq_go_to("1")
        rq_wait("1")
        gripper_1_selected = True
        gripper_2_selected = False
        gripper_3_selected = False
        gripper_4_selected = False
        gripper_1_used = False
        gripper_2_used = False
        gripper_3_used = False
        gripper_4_used = False
        # end: URCap Program Node
        $ 50 "Punto_de_pas_30" "breakAfter"
        movel(p[-.730316875156, .054384524890, .203797507571, 2.227075978734, 2.209005516752, .005794866456], a=1.2, v=0.25)
        $ 51 "MoverJ"
        $ 52 "Punto_de_pas_31" "breakAfter"
        movej(get_inverse_kin(p[.420289662432, -.599707494016, .203948560100, -2.195976676455, 2.244971349611, .008998131000], qnear=[2.0327024459838867, -0.9727509657489222, 0.9207220077514648, -1.512956444417135, -1.5714500586139124, -1.0868242422686976]), a=1.3962634015954636, v=1.0471975511965976)
        $ 53 "Palé"
        if (cont_2 == 0):
          pose_2 = p[.420312236792, -.599791586268, .026862123094, -2.196040974305, 2.245010484937, .008647737662]
        elif (cont_2 == 1):
          pose_2 = p[.377052081475, -.599750927454, .023745193947, -2.196248852557, 2.244847729295, .008812572149]
        elif (cont_2 == 2):
          pose_2 = p[.334102720363, -.599809959017, .023773719632, -2.196106358655, 2.244931737814, .008544524480]
        elif (cont_2 == 3):
          pose_2 = p[.290743324165, -.599773652469, .023823275559, -2.196160052440, 2.244955734556, .008598267835]
        elif (cont_2 == 4):
          pose_2 = p[.247313752403, -.599789399718, .023847864559, -2.195895712983, 2.244856516209, .008266422364]
        elif (cont_2 == 5):
          pose_2 = p[.420297857901, -.599769557252, .063211533032, -2.196052646053, 2.244995540075, .008719737162]
        elif (cont_2 == 6):
          pose_2 = p[.377029341830, -.599758155632, .064799811382, -2.196334972325, 2.244934527389, .008579161456]
        elif (cont_2 == 7):
          pose_2 = p[.334138686315, -.599772060694, .064117392518, -2.196213812262, 2.244772116746, .008588305298]
        elif (cont_2 == 8):
          pose_2 = p[.290748801488, -.599731932109, .064140824951, -2.196077029668, 2.244897320663, .008772919220]
        elif (cont_2 == 9):
          pose_2 = p[.247295808517, -.599806887646, .064238062177, -2.195794209303, 2.244887267138, .008282342822]
        elif (cont_2 == 10):
          pose_2 = p[.420330379400, -.599691653707, .105357768946, -2.196141572369, 2.244788685732, .009070726952]
        elif (cont_2 == 11):
          pose_2 = p[.377032109364, -.599774680450, .104967054319, -2.196393074107, 2.244966918305, .008530349931]
        elif (cont_2 == 12):
          pose_2 = p[.334109915991, -.599778941953, .104704455169, -2.196096078503, 2.244814190905, .008720600650]
        elif (cont_2 == 13):
          pose_2 = p[.290711725759, -.599724044841, .103933136885, -2.195934251159, 2.244912665537, .008954286942]
        elif (cont_2 == 14):
          pose_2 = p[.247283086430, -.599827633989, .104079147073, -2.195834812915, 2.244902095677, .008291189683]
        elif (cont_2 == 15):
          pose_2 = p[.420308198381, -.599640249549, .144931783117, -2.196131221812, 2.244697746473, .009356126143]
        elif (cont_2 == 16):
          pose_2 = p[.376970654631, -.599788237684, .145563674023, -2.196299567358, 2.245032849351, .008654356965]
        elif (cont_2 == 17):
          pose_2 = p[.334079406540, -.599804795402, .144552683217, -2.196120666176, 2.244758527048, .008751538844]
        elif (cont_2 == 18):
          pose_2 = p[.290720127968, -.599669253623, .144335238310, -2.195860521225, 2.244891377498, .009151380484]
        elif (cont_2 == 19):
          pose_2 = p[.247224034356, -.599835861703, .143155271415, -2.195693454164, 2.245025805272, .008208954346]
        end
        if (cont_2 >= 19):
          cont_2 = 0
        else:
          cont_2 = cont_2 + 1
        end
        $ 76 "Acercar_2" "noBreak"
        movel(pose_trans(pose_2, pose_trans(pose_inv(p[.420332541580, -.599771590778, .026883984711, -2.196014481273, 2.244930299416, .008648395331]),p[.420352422391, -.599741973293, .099277456086, -2.196123752652, 2.244880544161, .008696023419])), a=1.2, v=0.25)
        $ 77 "PuntoDePatrón_2" "noBreak"
        movel(pose_2, a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.3.1, Robotiq Inc.
        #   Type: Gripper
        $ 78 "Gripper Open (1)" "noBreak"
        gripper_1_used = True
        if (connectivity_checked[0] != 1):
          if not(rq_set_sid(9, "1")):
            popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
          end
          connectivity_checked[0] = 1
        end
        if (status_checked[0] != 1):
          if not(rq_is_gripper_activated("1")):
            popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
          end
          status_checked[0] = 1
        end
        rq_set_speed(255, "1")
        current_speed[0] = 255
        rq_set_force(255, "1")
        current_force[0] = 255
        rq_set_pos(0, "1")
        rq_go_to("1")
        rq_wait("1")
        gripper_1_selected = True
        gripper_2_selected = False
        gripper_3_selected = False
        gripper_4_selected = False
        gripper_1_used = False
        gripper_2_used = False
        gripper_3_used = False
        gripper_4_used = False
        # end: URCap Program Node
        $ 79 "Ajustar" "noBreak"
        $ 80 "Esperar: 1.0" "noBreak"
        sleep(1.0)
        $ 81 "Salir_2" "noBreak"
        movel(pose_trans(pose_2, pose_trans(pose_inv(p[.420332541580, -.599771590778, .026883984711, -2.196014481273, 2.244930299416, .008648395331]),p[.356400232689, -.599720957580, .099319847446, -2.196245557973, 2.244751242458, .008554699002])), a=1.2, v=0.25)
      end
    end
  end
end
